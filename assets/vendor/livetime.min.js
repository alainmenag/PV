// livetime.js / v1.1.2 / (c) 2012 Matt Bradley / MIT License
(function(d, g) {

  var h = 1E3,
      i = !1,
      e = d([]),
      j = function(b, a) {
          var c = b.data('livetimedata');
          'number' == typeof a && (a *= 1E3);
          b.removeAttr('data-livetime').removeData('livetime');
          a = g(a);
          g.isMoment(a) && !isNaN(+a) && (c = d.extend({}, {
              original: b.contents()
          }, c), c.moment = g(a), b.data('livetimedata', c).empty(), e.push(b[0]))
      },
      k = function() {
          i || (f.update(), setTimeout(k, h))
      },
      f = {
          update: function() {
              d('[data-livetime]').each(function() {
                  var a = d(this);
                  j(a, a.data('livetime'))
              });
              var b = [];
              e.each(function() {
                  var a = d(this),
                      c = a.data('livetimedata');
                  if (void 0 === c) b.push(this);
                  else if (g.isMoment(c.moment)) {
											var t = moment(moment().format()).diff(c.moment._i);
											var du = moment.duration(t);
											var s = [du.hours(), du.minutes(), du.seconds()].join(':');
											var s = moment.utc(t).format('HH:mm:ss');
                      var e = a.html(),
                          c = c.moment.fromNow();
                      if (e != c) {
                          var f = d.Event('change.livetime');
                          a.trigger(f, [e, c]);
                          f.isDefaultPrevented() || a.html(s)
                      }
                  }
              });
              e = e.not(b)
          },
          pause: function() {
              i = !0
          },
          resume: function() {
              i = !1;
              k()
          },
          interval: function(b) {
              if (void 0 === b) return h;
              h = b
          }
      },
      l = {
          add: function(b, a) {
              'number' == typeof a && (a *= 1E3);
              a = g(a);
              g.isMoment(a) && !isNaN(+a) && (b.each(function() {
                  j(d(this), a)
              }), f.update());
              return b
          },
          destroy: function(b) {
              e = e.not(b);
              b.each(function() {
                  var a =
                      d(this),
                      c = a.data('livetimedata');
                  if (void 0 === c) return b;
                  a.html(c.original ? c.original : '').removeData('livetimedata')
              });
              return b
          },
          islivetime: function(b) {
              return void 0 !== b.data('livetimedata')
          }
      };
  d.livetime = f;
  d(function() {
      f.resume()
  });
  d.fn.livetime = function(b, a) {
      l[b] || (a = b, b = 'add');
      return l[b](this, a)
  }

})(jQuery, moment);